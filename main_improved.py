#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è main.py —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID —Ä—ã–Ω–∫–æ–≤ –∏ –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
"""

import asyncio
import logging
import argparse
from aiohttp import ClientSession

from core.metrics import init_metrics
from core.alerts import TelegramHandler
from core.processor import process_depth
from connectors import polymarket, sx

# –†–µ–∞–ª—å–Ω—ã–µ ID —Ä—ã–Ω–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
REAL_MARKET_IDS = {
    "polymarket": [
        "0x5177b16fef0e5c8c3b3b4b4b4b4b4b4b4b4b4b4b",  # –ü—Ä–∏–º–µ—Ä ID
        "0x1234567890123456789012345678901234567890",  # –ü—Ä–∏–º–µ—Ä ID
    ],
    "sx": [
        "0xabcdefabcdefabcdefabcdefabcdefabcdefabcd",  # –ü—Ä–∏–º–µ—Ä ID
        "0xfedcbafedcbafedcbafedcbafedcbafedcbafedc",  # –ü—Ä–∏–º–µ—Ä ID
    ]
}

async def test_market_connection(session: ClientSession, exchange: str, market_id: str) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä—ã–Ω–∫—É"""
    try:
        if exchange == "polymarket":
            depth = await polymarket.orderbook_depth(session, market_id)
        elif exchange == "sx":
            depth = await sx.orderbook_depth(session, market_id)
        else:
            return False
        
        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {exchange} —Ä—ã–Ω–∫—É {market_id[:10]}...")
        return True
    except Exception as exc:
        logging.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {exchange} —Ä—ã–Ω–∫—É {market_id[:10]}...: {exc}")
        return False

async def find_working_markets(session: ClientSession) -> tuple:
    """–ù–∞—Ö–æ–¥–∏–º —Ä–∞–±–æ—á–∏–µ —Ä—ã–Ω–∫–∏ –Ω–∞ –æ–±–µ–∏—Ö –±–∏—Ä–∂–∞—Ö"""
    logging.info("üîç –ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–∏—Ö —Ä—ã–Ω–∫–æ–≤...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Polymarket
    pm_market = None
    for market_id in REAL_MARKET_IDS["polymarket"]:
        if await test_market_connection(session, "polymarket", market_id):
            pm_market = market_id
            break
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º SX
    sx_market = None
    for market_id in REAL_MARKET_IDS["sx"]:
        if await test_market_connection(session, "sx", market_id):
            sx_market = market_id
            break
    
    return pm_market, sx_market

async def run_arbitrage_cycle(session: ClientSession, pm_market: str, sx_market: str) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    try:
        logging.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≥–ª—É–±–∏–Ω–µ —Å—Ç–∞–∫–∞–Ω–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–ª—É–±–∏–Ω–µ
        pm_depth = await polymarket.orderbook_depth(session, pm_market)
        sx_depth = await sx.orderbook_depth(session, sx_market)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await process_depth(pm_depth, sx_depth)
        
        logging.info("‚úÖ –¶–∏–∫–ª –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as exc:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {exc}")

async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –¥–ª—è Polymarket –∏ SX")
    parser.add_argument("--test", action="store_true", help="–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument("--interval", type=int, default=30, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)")
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    logging.getLogger().addHandler(TelegramHandler())
    init_metrics()
    
    logging.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    try:
        async with ClientSession() as session:
            # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–±–æ—á–∏–µ —Ä—ã–Ω–∫–∏
            pm_market, sx_market = await find_working_markets(session)
            
            if not pm_market or not sx_market:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–µ —Ä—ã–Ω–∫–∏ –Ω–∞ –æ–±–µ–∏—Ö –±–∏—Ä–∂–∞—Ö")
                return
            
            logging.info(f"üéØ –ù–∞–π–¥–µ–Ω—ã —Ä–∞–±–æ—á–∏–µ —Ä—ã–Ω–∫–∏:")
            logging.info(f"   Polymarket: {pm_market[:10]}...")
            logging.info(f"   SX: {sx_market[:10]}...")
            
            if args.test:
                # –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–¥–∏–Ω —Ü–∏–∫–ª
                logging.info("üß™ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
                await run_arbitrage_cycle(session, pm_market, sx_market)
            else:
                # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã - –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ —Ü–∏–∫–ª—ã
                logging.info(f"üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {args.interval} —Å–µ–∫...")
                while True:
                    await run_arbitrage_cycle(session, pm_market, sx_market)
                    await asyncio.sleep(args.interval)
                    
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as exc:
        logging.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}", exc_info=True)
        raise

if __name__ == "__main__":
    asyncio.run(main())