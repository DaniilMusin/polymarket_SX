#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import logging
from config import SLIP_BY_DEPTH
from core.processor import process_depth
from core.matcher import match, _normalize, _extract_teams

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

def analyze_config():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞"""
    print("üîß –ê–ù–ê–õ–ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 50)
    print(f"SLIP_BY_DEPTH: {SLIP_BY_DEPTH}")
    print("\n–õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è:")
    for depth, slip in sorted(SLIP_BY_DEPTH.items(), reverse=True):
        print(f"  - –ì–ª—É–±–∏–Ω–∞ ‚â• {depth}: –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ {slip:.4f}")
    print()

def analyze_processor_logic():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    print("‚öôÔ∏è –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –ü–†–û–¶–ï–°–°–û–†–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        (2000, 1800, "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≥–ª—É–±–∏–Ω–∞"),
        (1000, 1000, "–¢–æ—á–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ 1000"),
        (999, 999, "–ß—É—Ç—å –Ω–∏–∂–µ –≥—Ä–∞–Ω–∏—Ü—ã 1000"),
        (500, 500, "–¢–æ—á–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ 500"),
        (499, 499, "–ß—É—Ç—å –Ω–∏–∂–µ –≥—Ä–∞–Ω–∏—Ü—ã 500"),
        (0, 0, "–¢–æ—á–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ 0"),
        (-100, -100, "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞"),
    ]
    
    for pm_depth, sx_depth, description in test_cases:
        try:
            max_slip = asyncio.run(process_depth(pm_depth, sx_depth))
            print(f"  {description}: PM={pm_depth}, SX={sx_depth} ‚Üí slippage={max_slip:.4f}")
        except Exception as e:
            print(f"  {description}: PM={pm_depth}, SX={sx_depth} ‚Üí –û–®–ò–ë–ö–ê: {e}")
    print()

def analyze_matcher_logic():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –º–∞—Ç—á–µ—Ä–∞"""
    print("üîç –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –ú–ê–¢–ß–ï–†–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
    test_strings = [
        "Boston Celtics @ LA Clippers",
        "boston celtics @ la clippers",
        "Boston-Celtics @ LA-Clippers",
        "Boston Celtics at LA Clippers",
        "Simple Title",
    ]
    
    print("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫:")
    for s in test_strings:
        normalized = _normalize(s)
        teams = _extract_teams(s)
        print(f"  '{s}' ‚Üí '{normalized}' ‚Üí teams: {teams}")
    print()

def analyze_error_handling():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
    print("üö® –ê–ù–ê–õ–ò–ó –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—à–∏–±–æ–∫
    error_cases = [
        (None, 100, "None –¥–ª—è PM"),
        (100, None, "None –¥–ª—è SX"),
        (float('inf'), 100, "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å –¥–ª—è PM"),
        (100, float('-inf'), "–ú–∏–Ω—É—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å –¥–ª—è SX"),
        (0, 0, "–ù—É–ª–µ–≤–∞—è –≥–ª—É–±–∏–Ω–∞"),
    ]
    
    for pm_depth, sx_depth, description in error_cases:
        try:
            max_slip = asyncio.run(process_depth(pm_depth, sx_depth))
            print(f"  {description}: slippage={max_slip:.4f}")
        except Exception as e:
            print(f"  {description}: –û–®–ò–ë–ö–ê: {type(e).__name__}: {e}")
    print()

def analyze_performance():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
    print("‚ö° –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    import time
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    test_depths = [(1000, 800)] * 1000
    
    start_time = time.time()
    for pm_depth, sx_depth in test_depths:
        asyncio.run(process_depth(pm_depth, sx_depth))
    end_time = time.time()
    
    total_time = end_time - start_time
    avg_time = total_time / len(test_depths)
    
    print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(test_depths)} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {total_time:.3f} —Å–µ–∫")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: {avg_time*1000:.3f} –º—Å")
    print(f"  –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {len(test_depths)/total_time:.0f} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("ü§ñ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–†–ë–ò–¢–†–ê–ñ–ù–û–ì–û –ë–û–¢–ê")
    print("=" * 60)
    print()
    
    analyze_config()
    analyze_processor_logic()
    analyze_matcher_logic()
    analyze_error_handling()
    analyze_performance()
    
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()