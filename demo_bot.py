#!/usr/bin/env python3
"""
–î–µ–º–æ-–≤–µ—Ä—Å–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import logging
import random
from typing import Dict, List, Tuple

from core.metrics import init_metrics
from core.alerts import TelegramHandler
from core.processor import process_depth

# –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
MOCK_DEPTH_DATA = {
    "polymarket": {
        "bids": [
            {"price": 0.65, "size": 1000},
            {"price": 0.64, "size": 1500},
            {"price": 0.63, "size": 2000},
            {"price": 0.62, "size": 2500},
            {"price": 0.61, "size": 3000},
        ],
        "asks": [
            {"price": 0.66, "size": 800},
            {"price": 0.67, "size": 1200},
            {"price": 0.68, "size": 1800},
            {"price": 0.69, "size": 2200},
            {"price": 0.70, "size": 2800},
        ]
    },
    "sx": {
        "bids": [
            {"price": 0.655, "size": 900},
            {"price": 0.645, "size": 1400},
            {"price": 0.635, "size": 1900},
            {"price": 0.625, "size": 2400},
            {"price": 0.615, "size": 2900},
        ],
        "asks": [
            {"price": 0.665, "size": 750},
            {"price": 0.675, "size": 1150},
            {"price": 0.685, "size": 1750},
            {"price": 0.695, "size": 2150},
            {"price": 0.705, "size": 2750},
        ]
    }
}

def generate_mock_depth() -> Tuple[Dict, Dict]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≥–ª—É–±–∏–Ω–µ —Å—Ç–∞–∫–∞–Ω–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∫ –±–∞–∑–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
    pm_depth = {
        "bids": [],
        "asks": []
    }
    
    sx_depth = {
        "bids": [],
        "asks": []
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Polymarket
    for bid in MOCK_DEPTH_DATA["polymarket"]["bids"]:
        price_variation = random.uniform(-0.01, 0.01)
        size_variation = random.uniform(0.8, 1.2)
        
        pm_depth["bids"].append({
            "price": round(bid["price"] + price_variation, 4),
            "size": int(bid["size"] * size_variation)
        })
    
    for ask in MOCK_DEPTH_DATA["polymarket"]["asks"]:
        price_variation = random.uniform(-0.01, 0.01)
        size_variation = random.uniform(0.8, 1.2)
        
        pm_depth["asks"].append({
            "price": round(ask["price"] + price_variation, 4),
            "size": int(ask["size"] * size_variation)
        })
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è SX
    for bid in MOCK_DEPTH_DATA["sx"]["bids"]:
        price_variation = random.uniform(-0.01, 0.01)
        size_variation = random.uniform(0.8, 1.2)
        
        sx_depth["bids"].append({
            "price": round(bid["price"] + price_variation, 4),
            "size": int(bid["size"] * size_variation)
        })
    
    for ask in MOCK_DEPTH_DATA["sx"]["asks"]:
        price_variation = random.uniform(-0.01, 0.01)
        size_variation = random.uniform(0.8, 1.2)
        
        sx_depth["asks"].append({
            "price": round(ask["price"] + price_variation, 4),
            "size": int(ask["size"] * size_variation)
        })
    
    return pm_depth, sx_depth

def print_depth_analysis(pm_depth: Dict, sx_depth: Dict) -> None:
    """–í—ã–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑ –≥–ª—É–±–∏–Ω—ã —Å—Ç–∞–∫–∞–Ω–∞"""
    print("\nüìä –ê–ù–ê–õ–ò–ó –ì–õ–£–ë–ò–ù–´ –°–¢–ê–ö–ê–ù–ê")
    print("=" * 50)
    
    # Polymarket
    print("üîµ Polymarket:")
    print("   –õ—É—á—à–∏–µ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏:")
    for i, bid in enumerate(pm_depth["bids"][:3]):
        print(f"     {i+1}. ${bid['price']:.4f} - {bid['size']} —à—Ç")
    
    print("   –õ—É—á—à–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏:")
    for i, ask in enumerate(pm_depth["asks"][:3]):
        print(f"     {i+1}. ${ask['price']:.4f} - {ask['size']} —à—Ç")
    
    # SX
    print("\nüü° SX:")
    print("   –õ—É—á—à–∏–µ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏:")
    for i, bid in enumerate(sx_depth["bids"][:3]):
        print(f"     {i+1}. ${bid['price']:.4f} - {bid['size']} —à—Ç")
    
    print("   –õ—É—á—à–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏:")
    for i, ask in enumerate(sx_depth["asks"][:3]):
        print(f"     {i+1}. ${ask['price']:.4f} - {ask['size']} —à—Ç")
    
    # –°–ø—Ä–µ–¥
    pm_spread = pm_depth["asks"][0]["price"] - pm_depth["bids"][0]["price"]
    sx_spread = sx_depth["asks"][0]["price"] - sx_depth["bids"][0]["price"]
    
    print(f"\nüìà –°–ø—Ä–µ–¥—ã:")
    print(f"   Polymarket: {pm_spread:.4f} ({pm_spread*100:.2f}%)")
    print(f"   SX: {sx_spread:.4f} ({sx_spread*100:.2f}%)")

def calculate_total_depth(orderbook: Dict) -> float:
    """–í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –≥–ª—É–±–∏–Ω—É —Å—Ç–∞–∫–∞–Ω–∞"""
    total_bids = sum(order["size"] for order in orderbook.get("bids", []))
    total_asks = sum(order["size"] for order in orderbook.get("asks", []))
    return total_bids + total_asks

async def demo_cycle(cycle_num: int) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω –¥–µ–º–æ-—Ü–∏–∫–ª"""
    print(f"\nüîÑ –¶–ò–ö–õ #{cycle_num}")
    print("=" * 30)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    pm_depth, sx_depth = generate_mock_depth()
    
    # –í—ã–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
    print_depth_analysis(pm_depth, sx_depth)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –≥–ª—É–±–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
    pm_total_depth = calculate_total_depth(pm_depth)
    sx_total_depth = calculate_total_depth(sx_depth)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –±–æ—Ç–∞
    print(f"\n‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    print(f"   –û–±—â–∞—è –≥–ª—É–±–∏–Ω–∞ Polymarket: {pm_total_depth:.0f}")
    print(f"   –û–±—â–∞—è –≥–ª—É–±–∏–Ω–∞ SX: {sx_total_depth:.0f}")
    await process_depth(pm_total_depth, sx_total_depth)
    
    print(f"‚úÖ –¶–∏–∫–ª #{cycle_num} –∑–∞–≤–µ—Ä—à–µ–Ω")

async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ-–±–æ—Ç–∞"""
    parser = argparse.ArgumentParser(description="–î–µ–º–æ-–≤–µ—Ä—Å–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞")
    parser.add_argument("--cycles", type=int, default=3, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤")
    parser.add_argument("--interval", type=int, default=5, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)")
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    logging.getLogger().addHandler(TelegramHandler())
    init_metrics()
    
    print("üé≠ –î–ï–ú–û-–í–ï–†–°–ò–Ø –ê–†–ë–ò–¢–†–ê–ñ–ù–û–ì–û –ë–û–¢–ê")
    print("=" * 50)
    print("–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤: {args.cycles}")
    print(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {args.interval} —Å–µ–∫")
    print()
    
    try:
        for cycle in range(1, args.cycles + 1):
            await demo_cycle(cycle)
            
            if cycle < args.cycles:
                print(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {args.interval} —Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
                await asyncio.sleep(args.interval)
        
        print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–ø–æ–ª–Ω–µ–Ω–æ {args.cycles} —Ü–∏–∫–ª–æ–≤.")
        
    except KeyboardInterrupt:
        print("\nüõë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as exc:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {exc}")
        raise

if __name__ == "__main__":
    import argparse
    asyncio.run(main())